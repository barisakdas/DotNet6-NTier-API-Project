// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RepositoryLayer.Context;

#nullable disable

namespace RepositoryLayer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220310193042_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CoreLayer.Entity.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedDate = new DateTime(2022, 3, 10, 22, 30, 42, 85, DateTimeKind.Local).AddTicks(2576),
                            Name = "Kalemler"
                        },
                        new
                        {
                            ID = 2,
                            CreatedDate = new DateTime(2022, 3, 10, 22, 30, 42, 85, DateTimeKind.Local).AddTicks(2601),
                            Name = "Kitaplar"
                        },
                        new
                        {
                            ID = 3,
                            CreatedDate = new DateTime(2022, 3, 10, 22, 30, 42, 85, DateTimeKind.Local).AddTicks(2603),
                            Name = "Defterler"
                        });
                });

            modelBuilder.Entity("CoreLayer.Entity.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CategoryID = 1,
                            CreatedDate = new DateTime(2022, 3, 10, 22, 30, 42, 85, DateTimeKind.Local).AddTicks(2772),
                            Name = "Rotring",
                            Price = 50m,
                            Stock = 100
                        },
                        new
                        {
                            ID = 2,
                            CategoryID = 1,
                            CreatedDate = new DateTime(2022, 3, 10, 22, 30, 42, 85, DateTimeKind.Local).AddTicks(2850),
                            Name = "Faber",
                            Price = 10m,
                            Stock = 50
                        },
                        new
                        {
                            ID = 3,
                            CategoryID = 2,
                            CreatedDate = new DateTime(2022, 3, 10, 22, 30, 42, 85, DateTimeKind.Local).AddTicks(2853),
                            Name = "Sefiller",
                            Price = 10m,
                            Stock = 50
                        },
                        new
                        {
                            ID = 4,
                            CategoryID = 2,
                            CreatedDate = new DateTime(2022, 3, 10, 22, 30, 42, 85, DateTimeKind.Local).AddTicks(2855),
                            Name = "Faber",
                            Price = 10m,
                            Stock = 50
                        },
                        new
                        {
                            ID = 5,
                            CategoryID = 3,
                            CreatedDate = new DateTime(2022, 3, 10, 22, 30, 42, 85, DateTimeKind.Local).AddTicks(2856),
                            Name = "Mopak",
                            Price = 12m,
                            Stock = 152
                        },
                        new
                        {
                            ID = 6,
                            CategoryID = 3,
                            CreatedDate = new DateTime(2022, 3, 10, 22, 30, 42, 85, DateTimeKind.Local).AddTicks(2861),
                            Name = "Other",
                            Price = 18m,
                            Stock = 250
                        });
                });

            modelBuilder.Entity("CoreLayer.Entity.ProductFeature", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ProductID")
                        .IsUnique();

                    b.ToTable("ProductFeatures");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Color = "Kırmızı",
                            ProductID = 1
                        },
                        new
                        {
                            ID = 2,
                            Color = "Mavi",
                            ProductID = 2
                        });
                });

            modelBuilder.Entity("CoreLayer.Entity.Product", b =>
                {
                    b.HasOne("CoreLayer.Entity.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CoreLayer.Entity.ProductFeature", b =>
                {
                    b.HasOne("CoreLayer.Entity.Product", "Product")
                        .WithOne("ProductFeature")
                        .HasForeignKey("CoreLayer.Entity.ProductFeature", "ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CoreLayer.Entity.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("CoreLayer.Entity.Product", b =>
                {
                    b.Navigation("ProductFeature")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
